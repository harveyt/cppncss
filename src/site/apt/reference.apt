  ------
  Reference
  ------
  Mathieu Champlon
  ------

Reference

 Sums and averages are self explanatory but more complex measurements are detailed here.

* Non Commenting Source Statement (NCSS)

** Counting

 Roughly spoken, this measurement is approximately equivalent to counting ';' and '\{' characters in source files.

 Actually, the counter gets incremented by one for each of the following constructs:

*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| <<Type>>                  | <<Examples>>                             | <<Comment>>                                                                                                      |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Namespace definition      | namespace my_namespace \{                |                                                                                                                  |
|                           | namespace \{                             |                                                                                                                  |
|                           | namespace n = my_namespace::sub;         |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Type declaration          | class MyClass;                           | class, struct, union, enum, typedef                                                                              |
|                           | friend class MyClass;                    |                                                                                                                  |
|                           | struct MyStruct;                         |                                                                                                                  |
|                           | union MyUnion;                           |                                                                                                                  |
|                           | enum MyEnum;                             |                                                                                                                  |
|                           | typedef int ID;                          |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Type definition           | class MyClass \{                         | class, struct, union, enum                                                                                       |
|                           | class\ MyClass\ :\ public\ BaseClass\ \{ |                                                                                                                  |
|                           | class \{                                 |                                                                                                                  |
|                           | union MyUnion \{                         |                                                                                                                  |
|                           | union \{                                 |                                                                                                                  |
|                           | struct MyStruct \{                       |                                                                                                                  |
|                           | struct \{                                |                                                                                                                  |
|                           | enum \{                                  |                                                                                                                  |
|                           | enum MyEnum \{                           |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Using declaration         | using namespace std;                     |                                                                                                                  |
|                           | using std::vector;                       |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Variable declaration      | int a;                                   | No matter how many variables get actually declared through a comma separated list, only one statement is counted |
|                           | int a, b, c = 5, d = 6;                  |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Function declaration      | void method();                           | function, method, constructor, destructor                                                                        |
|                           | virtual void method() = 0;               |                                                                                                                  |
|                           | explicit MyClass( int i );               |                                                                                                                  |
|                           | virtual ~MyClass();                      |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Function definition       | void method() \{                         | function, method, constructor, destructor                                                                        |
|                           | void method() throw() \{                 |                                                                                                                  |
|                           | MyClass() \{                             |                                                                                                                  |
|                           | ~MyClass() \{                            |                                                                                                                  |
|                           | MyClass::MyClass() \{                    |                                                                                                                  |
|                           | MyClass::~MyClass() \{                   |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Base class initialization | : Base_ABC( data )                       |                                                                                                                  |
|                           | , Base( data )                           |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Field initialization      | : field_( 0 )                            |                                                                                                                  |
|                           | , data_( data )                          |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Statement                 | i = 0;                                   | expression, if, else, while, do, for, switch, break, continue, return, throw, catch, goto                        |
|                           | if( ok )                                 |                                                                                                                  |
|                           | if( exit ) \{                            |                                                                                                                  |
|                           | if( 3 == 4 );                            |                                                                                                                  |
|                           | if( something() ) \{ ; }                 |                                                                                                                  |
|                           | } else \{                                |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Label                     | label :                                  | In a switch statement or to be referenced by a goto statement                                                    |
|                           | case 0 :                                 |                                                                                                                  |
|                           | default :                                |                                                                                                                  |
*---------------------------+------------------------------------------+------------------------------------------------------------------------------------------------------------------+

 Not counted are empty statements, empty blocks, semicolons after closing brackets or single semicolons.\
 Of course, comments don't get counted.\
 Closing brackets also never get counted, the same applies to blocks in general.

* Cyclomatic Complexity Number (CNN)

 CCN is also know as McCabe Metric.\
 There exists a much hyped theory behind it based on graph theory, but it all comes down to simply counting <if>, <for>, <while>, etc.. statements in a method.\
 Whenever the control flow of a method splits, the counter gets incremented by one.

 Each method has a minimum value of 1 per default. For each of the following constructs this value gets incremented by one:

*---------------------------+--------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| <<Type>>                  | <<Examples>>                               | <<Comment>>                                                                                                      |
*---------------------------+--------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| If statement              | if( ok )                                   | <switch>, <else> and <:> don't increment the counter                                                                       |
|                           | if( exit ) \{                              |                                                                                                                  |
|                           | if( 3 == 4 );                              |                                                                                                                  |
|                           | if( something() ) \{ ; }                   |                                                                                                                  |
|                           | i ? j                                      |                                                                                                                  |
*---------------------------+--------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Iteration statement       | for(\ int\ i\ =\ 0;\ i\ \<\ n;\ ++i\ )\ \{ |                                                                                                                  |
|                           | while( ok ) \{                             |                                                                                                                  |
|                           | do \{                                      |                                                                                                                  |
*---------------------------+--------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Case label                | case 0:                                    | <default> doesn't increment the counter                                                                          |
*---------------------------+--------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Catch block               | catch \{                                   |                                                                                                                  |
*---------------------------+--------------------------------------------+------------------------------------------------------------------------------------------------------------------+
| Logical Expression        | i && j                                     |                                                                                                                  |
|                           | i \|\| j                                   |                                                                                                                  |
*---------------------------+--------------------------------------------+------------------------------------------------------------------------------------------------------------------+
 
 Note that a simple method with a <switch> statement and a huge block of <case> statements can have a surprisingly high CCN value (still it has the same value when converting a <switch> block to an equivalent sequence of <if> statements).

* References

 * {{{http://www.kclee.de/clemens/java/javancss}JavaNCSS}}

 * {{{http://c2.com/cgi/wiki?LinesOfCode}LinesOfCode}}

 * {{{http://c2.com/cgi/wiki?CyclomaticComplexityMetric}CyclomaticComplexityMetric}}

 * {{{http://en.wikipedia.org/wiki/Software_metric}Software_metric}}

 * {{{http://cccc.sourceforge.net}C and C++ Code Counter}}
